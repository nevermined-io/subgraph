// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class StandardRoyalties extends ethereum.SmartContract {
  static bind(address: Address): StandardRoyalties {
    return new StandardRoyalties("StandardRoyalties", address);
  }

  DENOMINATOR(): BigInt {
    let result = super.call("DENOMINATOR", "DENOMINATOR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_DENOMINATOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("DENOMINATOR", "DENOMINATOR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  check(
    _did: Bytes,
    _amounts: Array<BigInt>,
    _receivers: Array<Address>,
    param3: Address
  ): boolean {
    let result = super.call(
      "check",
      "check(bytes32,uint256[],address[],address):(bool)",
      [
        ethereum.Value.fromFixedBytes(_did),
        ethereum.Value.fromUnsignedBigIntArray(_amounts),
        ethereum.Value.fromAddressArray(_receivers),
        ethereum.Value.fromAddress(param3)
      ]
    );

    return result[0].toBoolean();
  }

  try_check(
    _did: Bytes,
    _amounts: Array<BigInt>,
    _receivers: Array<Address>,
    param3: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "check",
      "check(bytes32,uint256[],address[],address):(bool)",
      [
        ethereum.Value.fromFixedBytes(_did),
        ethereum.Value.fromUnsignedBigIntArray(_amounts),
        ethereum.Value.fromAddressArray(_receivers),
        ethereum.Value.fromAddress(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  royalties(param0: Bytes): BigInt {
    let result = super.call("royalties", "royalties(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBigInt();
  }

  try_royalties(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("royalties", "royalties(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _registry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class SetRoyaltyCall extends ethereum.Call {
  get inputs(): SetRoyaltyCall__Inputs {
    return new SetRoyaltyCall__Inputs(this);
  }

  get outputs(): SetRoyaltyCall__Outputs {
    return new SetRoyaltyCall__Outputs(this);
  }
}

export class SetRoyaltyCall__Inputs {
  _call: SetRoyaltyCall;

  constructor(call: SetRoyaltyCall) {
    this._call = call;
  }

  get _did(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _royalty(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetRoyaltyCall__Outputs {
  _call: SetRoyaltyCall;

  constructor(call: SetRoyaltyCall) {
    this._call = call;
  }
}
