// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class AgreementCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("_agreementId", Value.fromBytes(Bytes.empty()));
    this.set("_did", Value.fromBytes(Bytes.empty()));
    this.set("_accessConsumer", Value.fromBytes(Bytes.empty()));
    this.set("_accessProvider", Value.fromBytes(Bytes.empty()));
    this.set("_timeLocks", Value.fromBigIntArray(new Array(0)));
    this.set("_timeOuts", Value.fromBigIntArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AgreementCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AgreementCreated entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AgreementCreated", id.toString(), this);
    }
  }

  static load(id: string): AgreementCreated | null {
    return changetype<AgreementCreated | null>(
      store.get("AgreementCreated", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _agreementId(): Bytes {
    let value = this.get("_agreementId");
    return value!.toBytes();
  }

  set _agreementId(value: Bytes) {
    this.set("_agreementId", Value.fromBytes(value));
  }

  get _did(): Bytes {
    let value = this.get("_did");
    return value!.toBytes();
  }

  set _did(value: Bytes) {
    this.set("_did", Value.fromBytes(value));
  }

  get _accessConsumer(): Bytes {
    let value = this.get("_accessConsumer");
    return value!.toBytes();
  }

  set _accessConsumer(value: Bytes) {
    this.set("_accessConsumer", Value.fromBytes(value));
  }

  get _accessProvider(): Bytes {
    let value = this.get("_accessProvider");
    return value!.toBytes();
  }

  set _accessProvider(value: Bytes) {
    this.set("_accessProvider", Value.fromBytes(value));
  }

  get _timeLocks(): Array<BigInt> {
    let value = this.get("_timeLocks");
    return value!.toBigIntArray();
  }

  set _timeLocks(value: Array<BigInt>) {
    this.set("_timeLocks", Value.fromBigIntArray(value));
  }

  get _timeOuts(): Array<BigInt> {
    let value = this.get("_timeOuts");
    return value!.toBigIntArray();
  }

  set _timeOuts(value: Array<BigInt>) {
    this.set("_timeOuts", Value.fromBigIntArray(value));
  }
}

export class OwnershipTransferred extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("previousOwner", Value.fromBytes(Bytes.empty()));
    this.set("newOwner", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OwnershipTransferred entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save OwnershipTransferred entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("OwnershipTransferred", id.toString(), this);
    }
  }

  static load(id: string): OwnershipTransferred | null {
    return changetype<OwnershipTransferred | null>(
      store.get("OwnershipTransferred", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get previousOwner(): Bytes {
    let value = this.get("previousOwner");
    return value!.toBytes();
  }

  set previousOwner(value: Bytes) {
    this.set("previousOwner", Value.fromBytes(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value!.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }
}

export class VaultCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("_vaultAddress", Value.fromBytes(Bytes.empty()));
    this.set("_creator", Value.fromBytes(Bytes.empty()));
    this.set("_lender", Value.fromBytes(Bytes.empty()));
    this.set("_borrower", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VaultCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save VaultCreated entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("VaultCreated", id.toString(), this);
    }
  }

  static load(id: string): VaultCreated | null {
    return changetype<VaultCreated | null>(store.get("VaultCreated", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _vaultAddress(): Bytes {
    let value = this.get("_vaultAddress");
    return value!.toBytes();
  }

  set _vaultAddress(value: Bytes) {
    this.set("_vaultAddress", Value.fromBytes(value));
  }

  get _creator(): Bytes {
    let value = this.get("_creator");
    return value!.toBytes();
  }

  set _creator(value: Bytes) {
    this.set("_creator", Value.fromBytes(value));
  }

  get _lender(): Bytes {
    let value = this.get("_lender");
    return value!.toBytes();
  }

  set _lender(value: Bytes) {
    this.set("_lender", Value.fromBytes(value));
  }

  get _borrower(): Bytes {
    let value = this.get("_borrower");
    return value!.toBytes();
  }

  set _borrower(value: Bytes) {
    this.set("_borrower", Value.fromBytes(value));
  }
}
