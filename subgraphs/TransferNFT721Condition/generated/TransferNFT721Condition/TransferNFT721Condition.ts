// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Fulfilled extends ethereum.Event {
  get params(): Fulfilled__Params {
    return new Fulfilled__Params(this);
  }
}

export class Fulfilled__Params {
  _event: Fulfilled;

  constructor(event: Fulfilled) {
    this._event = event;
  }

  get _agreementId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _did(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get _receiver(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _conditionId(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get _contract(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class TransferNFT721Condition extends ethereum.SmartContract {
  static bind(address: Address): TransferNFT721Condition {
    return new TransferNFT721Condition("TransferNFT721Condition", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PROXY_ROLE(): Bytes {
    let result = super.call("PROXY_ROLE", "PROXY_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_PROXY_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("PROXY_ROLE", "PROXY_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  abortByTimeOut(_id: Bytes): i32 {
    let result = super.call(
      "abortByTimeOut",
      "abortByTimeOut(bytes32):(uint8)",
      [ethereum.Value.fromFixedBytes(_id)]
    );

    return result[0].toI32();
  }

  try_abortByTimeOut(_id: Bytes): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "abortByTimeOut",
      "abortByTimeOut(bytes32):(uint8)",
      [ethereum.Value.fromFixedBytes(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  addressToBytes32(_addr: Address): Bytes {
    let result = super.call(
      "addressToBytes32",
      "addressToBytes32(address):(bytes32)",
      [ethereum.Value.fromAddress(_addr)]
    );

    return result[0].toBytes();
  }

  try_addressToBytes32(_addr: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "addressToBytes32",
      "addressToBytes32(address):(bytes32)",
      [ethereum.Value.fromAddress(_addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  bytes32ToAddress(_b32: Bytes): Address {
    let result = super.call(
      "bytes32ToAddress",
      "bytes32ToAddress(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(_b32)]
    );

    return result[0].toAddress();
  }

  try_bytes32ToAddress(_b32: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "bytes32ToAddress",
      "bytes32ToAddress(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(_b32)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  calculateTotalAmount(_amounts: Array<BigInt>): BigInt {
    let result = super.call(
      "calculateTotalAmount",
      "calculateTotalAmount(uint256[]):(uint256)",
      [ethereum.Value.fromUnsignedBigIntArray(_amounts)]
    );

    return result[0].toBigInt();
  }

  try_calculateTotalAmount(
    _amounts: Array<BigInt>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateTotalAmount",
      "calculateTotalAmount(uint256[]):(uint256)",
      [ethereum.Value.fromUnsignedBigIntArray(_amounts)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  encodeParams(
    _did: Bytes,
    _nftHolder: Address,
    _nftReceiver: Address,
    _nftAmount: BigInt,
    _lockPaymentCondition: Bytes,
    _nftContractAddress: Address,
    _transfer: boolean
  ): Bytes {
    let result = super.call(
      "encodeParams",
      "encodeParams(bytes32,address,address,uint256,bytes32,address,bool):(bytes)",
      [
        ethereum.Value.fromFixedBytes(_did),
        ethereum.Value.fromAddress(_nftHolder),
        ethereum.Value.fromAddress(_nftReceiver),
        ethereum.Value.fromUnsignedBigInt(_nftAmount),
        ethereum.Value.fromFixedBytes(_lockPaymentCondition),
        ethereum.Value.fromAddress(_nftContractAddress),
        ethereum.Value.fromBoolean(_transfer)
      ]
    );

    return result[0].toBytes();
  }

  try_encodeParams(
    _did: Bytes,
    _nftHolder: Address,
    _nftReceiver: Address,
    _nftAmount: BigInt,
    _lockPaymentCondition: Bytes,
    _nftContractAddress: Address,
    _transfer: boolean
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "encodeParams",
      "encodeParams(bytes32,address,address,uint256,bytes32,address,bool):(bytes)",
      [
        ethereum.Value.fromFixedBytes(_did),
        ethereum.Value.fromAddress(_nftHolder),
        ethereum.Value.fromAddress(_nftReceiver),
        ethereum.Value.fromUnsignedBigInt(_nftAmount),
        ethereum.Value.fromFixedBytes(_lockPaymentCondition),
        ethereum.Value.fromAddress(_nftContractAddress),
        ethereum.Value.fromBoolean(_transfer)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  fulfill(
    _agreementId: Bytes,
    _did: Bytes,
    _nftReceiver: Address,
    _nftAmount: BigInt,
    _lockPaymentCondition: Bytes,
    _contract: Address,
    _transfer: boolean
  ): i32 {
    let result = super.call(
      "fulfill",
      "fulfill(bytes32,bytes32,address,uint256,bytes32,address,bool):(uint8)",
      [
        ethereum.Value.fromFixedBytes(_agreementId),
        ethereum.Value.fromFixedBytes(_did),
        ethereum.Value.fromAddress(_nftReceiver),
        ethereum.Value.fromUnsignedBigInt(_nftAmount),
        ethereum.Value.fromFixedBytes(_lockPaymentCondition),
        ethereum.Value.fromAddress(_contract),
        ethereum.Value.fromBoolean(_transfer)
      ]
    );

    return result[0].toI32();
  }

  try_fulfill(
    _agreementId: Bytes,
    _did: Bytes,
    _nftReceiver: Address,
    _nftAmount: BigInt,
    _lockPaymentCondition: Bytes,
    _contract: Address,
    _transfer: boolean
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "fulfill",
      "fulfill(bytes32,bytes32,address,uint256,bytes32,address,bool):(uint8)",
      [
        ethereum.Value.fromFixedBytes(_agreementId),
        ethereum.Value.fromFixedBytes(_did),
        ethereum.Value.fromAddress(_nftReceiver),
        ethereum.Value.fromUnsignedBigInt(_nftAmount),
        ethereum.Value.fromFixedBytes(_lockPaymentCondition),
        ethereum.Value.fromAddress(_contract),
        ethereum.Value.fromBoolean(_transfer)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  fulfillForDelegate(
    _agreementId: Bytes,
    _did: Bytes,
    _nftHolder: Address,
    _nftReceiver: Address,
    _nftAmount: BigInt,
    _lockPaymentCondition: Bytes,
    _transfer: boolean
  ): i32 {
    let result = super.call(
      "fulfillForDelegate",
      "fulfillForDelegate(bytes32,bytes32,address,address,uint256,bytes32,bool):(uint8)",
      [
        ethereum.Value.fromFixedBytes(_agreementId),
        ethereum.Value.fromFixedBytes(_did),
        ethereum.Value.fromAddress(_nftHolder),
        ethereum.Value.fromAddress(_nftReceiver),
        ethereum.Value.fromUnsignedBigInt(_nftAmount),
        ethereum.Value.fromFixedBytes(_lockPaymentCondition),
        ethereum.Value.fromBoolean(_transfer)
      ]
    );

    return result[0].toI32();
  }

  try_fulfillForDelegate(
    _agreementId: Bytes,
    _did: Bytes,
    _nftHolder: Address,
    _nftReceiver: Address,
    _nftAmount: BigInt,
    _lockPaymentCondition: Bytes,
    _transfer: boolean
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "fulfillForDelegate",
      "fulfillForDelegate(bytes32,bytes32,address,address,uint256,bytes32,bool):(uint8)",
      [
        ethereum.Value.fromFixedBytes(_agreementId),
        ethereum.Value.fromFixedBytes(_did),
        ethereum.Value.fromAddress(_nftHolder),
        ethereum.Value.fromAddress(_nftReceiver),
        ethereum.Value.fromUnsignedBigInt(_nftAmount),
        ethereum.Value.fromFixedBytes(_lockPaymentCondition),
        ethereum.Value.fromBoolean(_transfer)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  fulfillForDelegate1(
    _agreementId: Bytes,
    _did: Bytes,
    _nftHolder: Address,
    _nftReceiver: Address,
    _nftAmount: BigInt,
    _lockPaymentCondition: Bytes,
    _transfer: boolean,
    _nftContractAddress: Address,
    _expirationBlock: BigInt
  ): i32 {
    let result = super.call(
      "fulfillForDelegate",
      "fulfillForDelegate(bytes32,bytes32,address,address,uint256,bytes32,bool,address,uint256):(uint8)",
      [
        ethereum.Value.fromFixedBytes(_agreementId),
        ethereum.Value.fromFixedBytes(_did),
        ethereum.Value.fromAddress(_nftHolder),
        ethereum.Value.fromAddress(_nftReceiver),
        ethereum.Value.fromUnsignedBigInt(_nftAmount),
        ethereum.Value.fromFixedBytes(_lockPaymentCondition),
        ethereum.Value.fromBoolean(_transfer),
        ethereum.Value.fromAddress(_nftContractAddress),
        ethereum.Value.fromUnsignedBigInt(_expirationBlock)
      ]
    );

    return result[0].toI32();
  }

  try_fulfillForDelegate1(
    _agreementId: Bytes,
    _did: Bytes,
    _nftHolder: Address,
    _nftReceiver: Address,
    _nftAmount: BigInt,
    _lockPaymentCondition: Bytes,
    _transfer: boolean,
    _nftContractAddress: Address,
    _expirationBlock: BigInt
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "fulfillForDelegate",
      "fulfillForDelegate(bytes32,bytes32,address,address,uint256,bytes32,bool,address,uint256):(uint8)",
      [
        ethereum.Value.fromFixedBytes(_agreementId),
        ethereum.Value.fromFixedBytes(_did),
        ethereum.Value.fromAddress(_nftHolder),
        ethereum.Value.fromAddress(_nftReceiver),
        ethereum.Value.fromUnsignedBigInt(_nftAmount),
        ethereum.Value.fromFixedBytes(_lockPaymentCondition),
        ethereum.Value.fromBoolean(_transfer),
        ethereum.Value.fromAddress(_nftContractAddress),
        ethereum.Value.fromUnsignedBigInt(_expirationBlock)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  generateId(_agreementId: Bytes, _valueHash: Bytes): Bytes {
    let result = super.call(
      "generateId",
      "generateId(bytes32,bytes32):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(_agreementId),
        ethereum.Value.fromFixedBytes(_valueHash)
      ]
    );

    return result[0].toBytes();
  }

  try_generateId(
    _agreementId: Bytes,
    _valueHash: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "generateId",
      "generateId(bytes32,bytes32):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(_agreementId),
        ethereum.Value.fromFixedBytes(_valueHash)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getCurrentBlockNumber(): BigInt {
    let result = super.call(
      "getCurrentBlockNumber",
      "getCurrentBlockNumber():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentBlockNumber(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentBlockNumber",
      "getCurrentBlockNumber():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNFTDefaultAddress(): Address {
    let result = super.call(
      "getNFTDefaultAddress",
      "getNFTDefaultAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getNFTDefaultAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getNFTDefaultAddress",
      "getNFTDefaultAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getNvmConfigAddress(): Address {
    let result = super.call(
      "getNvmConfigAddress",
      "getNvmConfigAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getNvmConfigAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getNvmConfigAddress",
      "getNvmConfigAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getTrustedForwarder(): Address {
    let result = super.call(
      "getTrustedForwarder",
      "getTrustedForwarder():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getTrustedForwarder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTrustedForwarder",
      "getTrustedForwarder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hashValues(
    _did: Bytes,
    _nftHolder: Address,
    _nftReceiver: Address,
    _nftAmount: BigInt,
    _lockCondition: Bytes,
    _contract: Address,
    _transfer: boolean
  ): Bytes {
    let result = super.call(
      "hashValues",
      "hashValues(bytes32,address,address,uint256,bytes32,address,bool):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(_did),
        ethereum.Value.fromAddress(_nftHolder),
        ethereum.Value.fromAddress(_nftReceiver),
        ethereum.Value.fromUnsignedBigInt(_nftAmount),
        ethereum.Value.fromFixedBytes(_lockCondition),
        ethereum.Value.fromAddress(_contract),
        ethereum.Value.fromBoolean(_transfer)
      ]
    );

    return result[0].toBytes();
  }

  try_hashValues(
    _did: Bytes,
    _nftHolder: Address,
    _nftReceiver: Address,
    _nftAmount: BigInt,
    _lockCondition: Bytes,
    _contract: Address,
    _transfer: boolean
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashValues",
      "hashValues(bytes32,address,address,uint256,bytes32,address,bool):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(_did),
        ethereum.Value.fromAddress(_nftHolder),
        ethereum.Value.fromAddress(_nftReceiver),
        ethereum.Value.fromUnsignedBigInt(_nftAmount),
        ethereum.Value.fromFixedBytes(_lockCondition),
        ethereum.Value.fromAddress(_contract),
        ethereum.Value.fromBoolean(_transfer)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  isContract(addr: Address): boolean {
    let result = super.call("isContract", "isContract(address):(bool)", [
      ethereum.Value.fromAddress(addr)
    ]);

    return result[0].toBoolean();
  }

  try_isContract(addr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isContract", "isContract(address):(bool)", [
      ethereum.Value.fromAddress(addr)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTrustedForwarder(forwarder: Address): boolean {
    let result = super.call(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );

    return result[0].toBoolean();
  }

  try_isTrustedForwarder(forwarder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class AbortByTimeOutCall extends ethereum.Call {
  get inputs(): AbortByTimeOutCall__Inputs {
    return new AbortByTimeOutCall__Inputs(this);
  }

  get outputs(): AbortByTimeOutCall__Outputs {
    return new AbortByTimeOutCall__Outputs(this);
  }
}

export class AbortByTimeOutCall__Inputs {
  _call: AbortByTimeOutCall;

  constructor(call: AbortByTimeOutCall) {
    this._call = call;
  }

  get _id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class AbortByTimeOutCall__Outputs {
  _call: AbortByTimeOutCall;

  constructor(call: AbortByTimeOutCall) {
    this._call = call;
  }

  get value0(): i32 {
    return this._call.outputValues[0].value.toI32();
  }
}

export class FulfillCall extends ethereum.Call {
  get inputs(): FulfillCall__Inputs {
    return new FulfillCall__Inputs(this);
  }

  get outputs(): FulfillCall__Outputs {
    return new FulfillCall__Outputs(this);
  }
}

export class FulfillCall__Inputs {
  _call: FulfillCall;

  constructor(call: FulfillCall) {
    this._call = call;
  }

  get _agreementId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _did(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _nftReceiver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _nftAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _lockPaymentCondition(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _contract(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _transfer(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }
}

export class FulfillCall__Outputs {
  _call: FulfillCall;

  constructor(call: FulfillCall) {
    this._call = call;
  }

  get value0(): i32 {
    return this._call.outputValues[0].value.toI32();
  }
}

export class FulfillForDelegateCall extends ethereum.Call {
  get inputs(): FulfillForDelegateCall__Inputs {
    return new FulfillForDelegateCall__Inputs(this);
  }

  get outputs(): FulfillForDelegateCall__Outputs {
    return new FulfillForDelegateCall__Outputs(this);
  }
}

export class FulfillForDelegateCall__Inputs {
  _call: FulfillForDelegateCall;

  constructor(call: FulfillForDelegateCall) {
    this._call = call;
  }

  get _agreementId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _did(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _nftHolder(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _nftReceiver(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _nftAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _lockPaymentCondition(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get _transfer(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }
}

export class FulfillForDelegateCall__Outputs {
  _call: FulfillForDelegateCall;

  constructor(call: FulfillForDelegateCall) {
    this._call = call;
  }

  get value0(): i32 {
    return this._call.outputValues[0].value.toI32();
  }
}

export class FulfillForDelegate1Call extends ethereum.Call {
  get inputs(): FulfillForDelegate1Call__Inputs {
    return new FulfillForDelegate1Call__Inputs(this);
  }

  get outputs(): FulfillForDelegate1Call__Outputs {
    return new FulfillForDelegate1Call__Outputs(this);
  }
}

export class FulfillForDelegate1Call__Inputs {
  _call: FulfillForDelegate1Call;

  constructor(call: FulfillForDelegate1Call) {
    this._call = call;
  }

  get _agreementId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _did(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _nftHolder(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _nftReceiver(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _nftAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _lockPaymentCondition(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get _transfer(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }

  get _nftContractAddress(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get _expirationBlock(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }
}

export class FulfillForDelegate1Call__Outputs {
  _call: FulfillForDelegate1Call;

  constructor(call: FulfillForDelegate1Call) {
    this._call = call;
  }

  get value0(): i32 {
    return this._call.outputValues[0].value.toI32();
  }
}

export class FulfillProxyCall extends ethereum.Call {
  get inputs(): FulfillProxyCall__Inputs {
    return new FulfillProxyCall__Inputs(this);
  }

  get outputs(): FulfillProxyCall__Outputs {
    return new FulfillProxyCall__Outputs(this);
  }
}

export class FulfillProxyCall__Inputs {
  _call: FulfillProxyCall;

  constructor(call: FulfillProxyCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _agreementId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _params(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class FulfillProxyCall__Outputs {
  _call: FulfillProxyCall;

  constructor(call: FulfillProxyCall) {
    this._call = call;
  }
}

export class GrantProxyRoleCall extends ethereum.Call {
  get inputs(): GrantProxyRoleCall__Inputs {
    return new GrantProxyRoleCall__Inputs(this);
  }

  get outputs(): GrantProxyRoleCall__Outputs {
    return new GrantProxyRoleCall__Outputs(this);
  }
}

export class GrantProxyRoleCall__Inputs {
  _call: GrantProxyRoleCall;

  constructor(call: GrantProxyRoleCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GrantProxyRoleCall__Outputs {
  _call: GrantProxyRoleCall;

  constructor(call: GrantProxyRoleCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _conditionStoreManagerAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _didRegistryAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _ercAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _lockNFTConditionAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeProxyRoleCall extends ethereum.Call {
  get inputs(): RevokeProxyRoleCall__Inputs {
    return new RevokeProxyRoleCall__Inputs(this);
  }

  get outputs(): RevokeProxyRoleCall__Outputs {
    return new RevokeProxyRoleCall__Outputs(this);
  }
}

export class RevokeProxyRoleCall__Inputs {
  _call: RevokeProxyRoleCall;

  constructor(call: RevokeProxyRoleCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RevokeProxyRoleCall__Outputs {
  _call: RevokeProxyRoleCall;

  constructor(call: RevokeProxyRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
