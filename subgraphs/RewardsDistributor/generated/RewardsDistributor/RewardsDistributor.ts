// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class RewardsDistributor extends ethereum.SmartContract {
  static bind(address: Address): RewardsDistributor {
    return new RewardsDistributor("RewardsDistributor", address);
  }

  conditionStoreManager(): Address {
    let result = super.call(
      "conditionStoreManager",
      "conditionStoreManager():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_conditionStoreManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "conditionStoreManager",
      "conditionStoreManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  escrow(): Address {
    let result = super.call("escrow", "escrow():(address)", []);

    return result[0].toAddress();
  }

  try_escrow(): ethereum.CallResult<Address> {
    let result = super.tryCall("escrow", "escrow():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  receivers(param0: Bytes, param1: BigInt): Address {
    let result = super.call(
      "receivers",
      "receivers(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_receivers(param0: Bytes, param1: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "receivers",
      "receivers(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  used(param0: Bytes): boolean {
    let result = super.call("used", "used(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBoolean();
  }

  try_used(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("used", "used(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ClaimRewardCall extends ethereum.Call {
  get inputs(): ClaimRewardCall__Inputs {
    return new ClaimRewardCall__Inputs(this);
  }

  get outputs(): ClaimRewardCall__Outputs {
    return new ClaimRewardCall__Outputs(this);
  }
}

export class ClaimRewardCall__Inputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }

  get _agreementId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _did(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _receivers(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get _returnAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _lockPaymentAddress(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _lockCondition(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get _releaseConditions(): Array<Bytes> {
    return this._call.inputValues[8].value.toBytesArray();
  }
}

export class ClaimRewardCall__Outputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _registry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _conditionStoreManager(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _escrow(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class SetReceiversCall extends ethereum.Call {
  get inputs(): SetReceiversCall__Inputs {
    return new SetReceiversCall__Inputs(this);
  }

  get outputs(): SetReceiversCall__Outputs {
    return new SetReceiversCall__Outputs(this);
  }
}

export class SetReceiversCall__Inputs {
  _call: SetReceiversCall;

  constructor(call: SetReceiversCall) {
    this._call = call;
  }

  get _did(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _addr(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class SetReceiversCall__Outputs {
  _call: SetReceiversCall;

  constructor(call: SetReceiversCall) {
    this._call = call;
  }
}
