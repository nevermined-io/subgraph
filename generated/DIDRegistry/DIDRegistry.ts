// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ActedOnBehalf extends ethereum.Event {
  get params(): ActedOnBehalf__Params {
    return new ActedOnBehalf__Params(this);
  }
}

export class ActedOnBehalf__Params {
  _event: ActedOnBehalf;

  constructor(event: ActedOnBehalf) {
    this._event = event;
  }

  get _entityDid(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _delegateAgentId(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _responsibleAgentId(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _activityId(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get provId(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get _attributes(): string {
    return this._event.parameters[5].value.toString();
  }

  get _blockNumberUpdated(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class DIDAttributeRegistered extends ethereum.Event {
  get params(): DIDAttributeRegistered__Params {
    return new DIDAttributeRegistered__Params(this);
  }
}

export class DIDAttributeRegistered__Params {
  _event: DIDAttributeRegistered;

  constructor(event: DIDAttributeRegistered) {
    this._event = event;
  }

  get _did(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _checksum(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get _value(): string {
    return this._event.parameters[3].value.toString();
  }

  get _lastUpdatedBy(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get _blockNumberUpdated(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class DIDOwnershipTransferred extends ethereum.Event {
  get params(): DIDOwnershipTransferred__Params {
    return new DIDOwnershipTransferred__Params(this);
  }
}

export class DIDOwnershipTransferred__Params {
  _event: DIDOwnershipTransferred;

  constructor(event: DIDOwnershipTransferred) {
    this._event = event;
  }

  get _did(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _previousOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _newOwner(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class DIDPermissionGranted extends ethereum.Event {
  get params(): DIDPermissionGranted__Params {
    return new DIDPermissionGranted__Params(this);
  }
}

export class DIDPermissionGranted__Params {
  _event: DIDPermissionGranted;

  constructor(event: DIDPermissionGranted) {
    this._event = event;
  }

  get _did(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _grantee(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class DIDPermissionRevoked extends ethereum.Event {
  get params(): DIDPermissionRevoked__Params {
    return new DIDPermissionRevoked__Params(this);
  }
}

export class DIDPermissionRevoked__Params {
  _event: DIDPermissionRevoked;

  constructor(event: DIDPermissionRevoked) {
    this._event = event;
  }

  get _did(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _grantee(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class DIDProvenanceDelegateAdded extends ethereum.Event {
  get params(): DIDProvenanceDelegateAdded__Params {
    return new DIDProvenanceDelegateAdded__Params(this);
  }
}

export class DIDProvenanceDelegateAdded__Params {
  _event: DIDProvenanceDelegateAdded;

  constructor(event: DIDProvenanceDelegateAdded) {
    this._event = event;
  }

  get _did(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _delegate(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DIDProvenanceDelegateRemoved extends ethereum.Event {
  get params(): DIDProvenanceDelegateRemoved__Params {
    return new DIDProvenanceDelegateRemoved__Params(this);
  }
}

export class DIDProvenanceDelegateRemoved__Params {
  _event: DIDProvenanceDelegateRemoved;

  constructor(event: DIDProvenanceDelegateRemoved) {
    this._event = event;
  }

  get _did(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _delegate(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get state(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class DIDProviderAdded extends ethereum.Event {
  get params(): DIDProviderAdded__Params {
    return new DIDProviderAdded__Params(this);
  }
}

export class DIDProviderAdded__Params {
  _event: DIDProviderAdded;

  constructor(event: DIDProviderAdded) {
    this._event = event;
  }

  get _did(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _provider(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DIDProviderRemoved extends ethereum.Event {
  get params(): DIDProviderRemoved__Params {
    return new DIDProviderRemoved__Params(this);
  }
}

export class DIDProviderRemoved__Params {
  _event: DIDProviderRemoved;

  constructor(event: DIDProviderRemoved) {
    this._event = event;
  }

  get _did(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _provider(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get state(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProvenanceAttributeRegistered extends ethereum.Event {
  get params(): ProvenanceAttributeRegistered__Params {
    return new ProvenanceAttributeRegistered__Params(this);
  }
}

export class ProvenanceAttributeRegistered__Params {
  _event: ProvenanceAttributeRegistered;

  constructor(event: ProvenanceAttributeRegistered) {
    this._event = event;
  }

  get provId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _did(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get _agentId(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _activityId(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get _relatedDid(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get _agentInvolvedId(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get _method(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get _attributes(): string {
    return this._event.parameters[7].value.toString();
  }

  get _blockNumberUpdated(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class ProxyApproval extends ethereum.Event {
  get params(): ProxyApproval__Params {
    return new ProxyApproval__Params(this);
  }
}

export class ProxyApproval__Params {
  _event: ProxyApproval;

  constructor(event: ProxyApproval) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Used extends ethereum.Event {
  get params(): Used__Params {
    return new Used__Params(this);
  }
}

export class Used__Params {
  _event: Used;

  constructor(event: Used) {
    this._event = event;
  }

  get _did(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _agentId(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _activityId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get provId(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get _attributes(): string {
    return this._event.parameters[4].value.toString();
  }

  get _blockNumberUpdated(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class WasAssociatedWith extends ethereum.Event {
  get params(): WasAssociatedWith__Params {
    return new WasAssociatedWith__Params(this);
  }
}

export class WasAssociatedWith__Params {
  _event: WasAssociatedWith;

  constructor(event: WasAssociatedWith) {
    this._event = event;
  }

  get _entityDid(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _agentId(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _activityId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get provId(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get _attributes(): string {
    return this._event.parameters[4].value.toString();
  }

  get _blockNumberUpdated(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class WasDerivedFrom extends ethereum.Event {
  get params(): WasDerivedFrom__Params {
    return new WasDerivedFrom__Params(this);
  }
}

export class WasDerivedFrom__Params {
  _event: WasDerivedFrom;

  constructor(event: WasDerivedFrom) {
    this._event = event;
  }

  get _newEntityDid(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _usedEntityDid(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get _agentId(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _activityId(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get provId(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get _attributes(): string {
    return this._event.parameters[5].value.toString();
  }

  get _blockNumberUpdated(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class WasGeneratedBy extends ethereum.Event {
  get params(): WasGeneratedBy__Params {
    return new WasGeneratedBy__Params(this);
  }
}

export class WasGeneratedBy__Params {
  _event: WasGeneratedBy;

  constructor(event: WasGeneratedBy) {
    this._event = event;
  }

  get _did(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _agentId(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _activityId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get provId(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get _attributes(): string {
    return this._event.parameters[4].value.toString();
  }

  get _blockNumberUpdated(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class DIDRegistry__getDIDRegisterResult {
  value0: Address;
  value1: Bytes;
  value2: string;
  value3: Address;
  value4: BigInt;
  value5: Array<Address>;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;

  constructor(
    value0: Address,
    value1: Bytes,
    value2: string,
    value3: Address,
    value4: BigInt,
    value5: Array<Address>,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromAddressArray(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    return map;
  }
}

export class DIDRegistry__getProvenanceEntryResult {
  value0: Bytes;
  value1: Bytes;
  value2: Address;
  value3: Bytes;
  value4: Address;
  value5: i32;
  value6: Address;
  value7: BigInt;
  value8: Bytes;

  constructor(
    value0: Bytes,
    value1: Bytes,
    value2: Address,
    value3: Bytes,
    value4: Address,
    value5: i32,
    value6: Address,
    value7: BigInt,
    value8: Bytes
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromFixedBytes(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromBytes(this.value8));
    return map;
  }
}

export class DIDRegistry extends ethereum.SmartContract {
  static bind(address: Address): DIDRegistry {
    return new DIDRegistry("DIDRegistry", address);
  }

  _uri(): string {
    let result = super.call("_uri", "_uri():(string)", []);

    return result[0].toString();
  }

  try__uri(): ethereum.CallResult<string> {
    let result = super.tryCall("_uri", "_uri():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  actedOnBehalf(
    _provId: Bytes,
    _did: Bytes,
    _delegateAgentId: Address,
    _responsibleAgentId: Address,
    _activityId: Bytes,
    _signatureDelegate: Bytes,
    _attributes: string
  ): boolean {
    let result = super.call(
      "actedOnBehalf",
      "actedOnBehalf(bytes32,bytes32,address,address,bytes32,bytes,string):(bool)",
      [
        ethereum.Value.fromFixedBytes(_provId),
        ethereum.Value.fromFixedBytes(_did),
        ethereum.Value.fromAddress(_delegateAgentId),
        ethereum.Value.fromAddress(_responsibleAgentId),
        ethereum.Value.fromFixedBytes(_activityId),
        ethereum.Value.fromBytes(_signatureDelegate),
        ethereum.Value.fromString(_attributes)
      ]
    );

    return result[0].toBoolean();
  }

  try_actedOnBehalf(
    _provId: Bytes,
    _did: Bytes,
    _delegateAgentId: Address,
    _responsibleAgentId: Address,
    _activityId: Bytes,
    _signatureDelegate: Bytes,
    _attributes: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "actedOnBehalf",
      "actedOnBehalf(bytes32,bytes32,address,address,bytes32,bytes,string):(bool)",
      [
        ethereum.Value.fromFixedBytes(_provId),
        ethereum.Value.fromFixedBytes(_did),
        ethereum.Value.fromAddress(_delegateAgentId),
        ethereum.Value.fromAddress(_responsibleAgentId),
        ethereum.Value.fromFixedBytes(_activityId),
        ethereum.Value.fromBytes(_signatureDelegate),
        ethereum.Value.fromString(_attributes)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  areRoyaltiesValid(
    _did: Bytes,
    _amounts: Array<BigInt>,
    _receivers: Array<Address>
  ): boolean {
    let result = super.call(
      "areRoyaltiesValid",
      "areRoyaltiesValid(bytes32,uint256[],address[]):(bool)",
      [
        ethereum.Value.fromFixedBytes(_did),
        ethereum.Value.fromUnsignedBigIntArray(_amounts),
        ethereum.Value.fromAddressArray(_receivers)
      ]
    );

    return result[0].toBoolean();
  }

  try_areRoyaltiesValid(
    _did: Bytes,
    _amounts: Array<BigInt>,
    _receivers: Array<Address>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "areRoyaltiesValid",
      "areRoyaltiesValid(bytes32,uint256[],address[]):(bool)",
      [
        ethereum.Value.fromFixedBytes(_did),
        ethereum.Value.fromUnsignedBigIntArray(_amounts),
        ethereum.Value.fromAddressArray(_receivers)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf1(account: Address, _did: Bytes): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,bytes32):(uint256)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromFixedBytes(_did)]
    );

    return result[0].toBigInt();
  }

  try_balanceOf1(account: Address, _did: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,bytes32):(uint256)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromFixedBytes(_did)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getBlockNumberUpdated(_did: Bytes): BigInt {
    let result = super.call(
      "getBlockNumberUpdated",
      "getBlockNumberUpdated(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_did)]
    );

    return result[0].toBigInt();
  }

  try_getBlockNumberUpdated(_did: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBlockNumberUpdated",
      "getBlockNumberUpdated(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_did)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDIDOwner(_did: Bytes): Address {
    let result = super.call("getDIDOwner", "getDIDOwner(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(_did)
    ]);

    return result[0].toAddress();
  }

  try_getDIDOwner(_did: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getDIDOwner",
      "getDIDOwner(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(_did)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDIDRegister(_did: Bytes): DIDRegistry__getDIDRegisterResult {
    let result = super.call(
      "getDIDRegister",
      "getDIDRegister(bytes32):(address,bytes32,string,address,uint256,address[],uint256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(_did)]
    );

    return new DIDRegistry__getDIDRegisterResult(
      result[0].toAddress(),
      result[1].toBytes(),
      result[2].toString(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toAddressArray(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt()
    );
  }

  try_getDIDRegister(
    _did: Bytes
  ): ethereum.CallResult<DIDRegistry__getDIDRegisterResult> {
    let result = super.tryCall(
      "getDIDRegister",
      "getDIDRegister(bytes32):(address,bytes32,string,address,uint256,address[],uint256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(_did)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DIDRegistry__getDIDRegisterResult(
        value[0].toAddress(),
        value[1].toBytes(),
        value[2].toString(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toAddressArray(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt()
      )
    );
  }

  getDIDRegisterIds(): Array<Bytes> {
    let result = super.call(
      "getDIDRegisterIds",
      "getDIDRegisterIds():(bytes32[])",
      []
    );

    return result[0].toBytesArray();
  }

  try_getDIDRegisterIds(): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getDIDRegisterIds",
      "getDIDRegisterIds():(bytes32[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getDIDRegistrySize(): BigInt {
    let result = super.call(
      "getDIDRegistrySize",
      "getDIDRegistrySize():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getDIDRegistrySize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDIDRegistrySize",
      "getDIDRegistrySize():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPermission(_did: Bytes, _grantee: Address): boolean {
    let result = super.call(
      "getPermission",
      "getPermission(bytes32,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(_did),
        ethereum.Value.fromAddress(_grantee)
      ]
    );

    return result[0].toBoolean();
  }

  try_getPermission(
    _did: Bytes,
    _grantee: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getPermission",
      "getPermission(bytes32,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(_did),
        ethereum.Value.fromAddress(_grantee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getProvenanceEntry(_provId: Bytes): DIDRegistry__getProvenanceEntryResult {
    let result = super.call(
      "getProvenanceEntry",
      "getProvenanceEntry(bytes32):(bytes32,bytes32,address,bytes32,address,uint8,address,uint256,bytes)",
      [ethereum.Value.fromFixedBytes(_provId)]
    );

    return new DIDRegistry__getProvenanceEntryResult(
      result[0].toBytes(),
      result[1].toBytes(),
      result[2].toAddress(),
      result[3].toBytes(),
      result[4].toAddress(),
      result[5].toI32(),
      result[6].toAddress(),
      result[7].toBigInt(),
      result[8].toBytes()
    );
  }

  try_getProvenanceEntry(
    _provId: Bytes
  ): ethereum.CallResult<DIDRegistry__getProvenanceEntryResult> {
    let result = super.tryCall(
      "getProvenanceEntry",
      "getProvenanceEntry(bytes32):(bytes32,bytes32,address,bytes32,address,uint8,address,uint256,bytes)",
      [ethereum.Value.fromFixedBytes(_provId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DIDRegistry__getProvenanceEntryResult(
        value[0].toBytes(),
        value[1].toBytes(),
        value[2].toAddress(),
        value[3].toBytes(),
        value[4].toAddress(),
        value[5].toI32(),
        value[6].toAddress(),
        value[7].toBigInt(),
        value[8].toBytes()
      )
    );
  }

  getProvenanceOwner(_did: Bytes): Address {
    let result = super.call(
      "getProvenanceOwner",
      "getProvenanceOwner(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(_did)]
    );

    return result[0].toAddress();
  }

  try_getProvenanceOwner(_did: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getProvenanceOwner",
      "getProvenanceOwner(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(_did)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hashDID(_didSeed: Bytes, _creator: Address): Bytes {
    let result = super.call("hashDID", "hashDID(bytes32,address):(bytes32)", [
      ethereum.Value.fromFixedBytes(_didSeed),
      ethereum.Value.fromAddress(_creator)
    ]);

    return result[0].toBytes();
  }

  try_hashDID(_didSeed: Bytes, _creator: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashDID",
      "hashDID(bytes32,address):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(_didSeed),
        ethereum.Value.fromAddress(_creator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isDIDOwner(_address: Address, _did: Bytes): boolean {
    let result = super.call(
      "isDIDOwner",
      "isDIDOwner(address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(_address),
        ethereum.Value.fromFixedBytes(_did)
      ]
    );

    return result[0].toBoolean();
  }

  try_isDIDOwner(_address: Address, _did: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isDIDOwner",
      "isDIDOwner(address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(_address),
        ethereum.Value.fromFixedBytes(_did)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isDIDProvider(_did: Bytes, _provider: Address): boolean {
    let result = super.call(
      "isDIDProvider",
      "isDIDProvider(bytes32,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(_did),
        ethereum.Value.fromAddress(_provider)
      ]
    );

    return result[0].toBoolean();
  }

  try_isDIDProvider(
    _did: Bytes,
    _provider: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isDIDProvider",
      "isDIDProvider(bytes32,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(_did),
        ethereum.Value.fromAddress(_provider)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isHolder(account: Address, id: BigInt, amount: BigInt): boolean {
    let result = super.call(
      "isHolder",
      "isHolder(address,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_isHolder(
    account: Address,
    id: BigInt,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isHolder",
      "isHolder(address,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOwnerProviderOrDelegate(_did: Bytes): boolean {
    let result = super.call(
      "isOwnerProviderOrDelegate",
      "isOwnerProviderOrDelegate(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(_did)]
    );

    return result[0].toBoolean();
  }

  try_isOwnerProviderOrDelegate(_did: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isOwnerProviderOrDelegate",
      "isOwnerProviderOrDelegate(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(_did)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isProvenanceDelegate(_did: Bytes, _delegate: Address): boolean {
    let result = super.call(
      "isProvenanceDelegate",
      "isProvenanceDelegate(bytes32,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(_did),
        ethereum.Value.fromAddress(_delegate)
      ]
    );

    return result[0].toBoolean();
  }

  try_isProvenanceDelegate(
    _did: Bytes,
    _delegate: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isProvenanceDelegate",
      "isProvenanceDelegate(bytes32,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(_did),
        ethereum.Value.fromAddress(_delegate)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registerAttribute(
    _didSeed: Bytes,
    _checksum: Bytes,
    _providers: Array<Address>,
    _url: string
  ): BigInt {
    let result = super.call(
      "registerAttribute",
      "registerAttribute(bytes32,bytes32,address[],string):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_didSeed),
        ethereum.Value.fromFixedBytes(_checksum),
        ethereum.Value.fromAddressArray(_providers),
        ethereum.Value.fromString(_url)
      ]
    );

    return result[0].toBigInt();
  }

  try_registerAttribute(
    _didSeed: Bytes,
    _checksum: Bytes,
    _providers: Array<Address>,
    _url: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "registerAttribute",
      "registerAttribute(bytes32,bytes32,address[],string):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_didSeed),
        ethereum.Value.fromFixedBytes(_checksum),
        ethereum.Value.fromAddressArray(_providers),
        ethereum.Value.fromString(_url)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  registerDID(
    _didSeed: Bytes,
    _checksum: Bytes,
    _providers: Array<Address>,
    _url: string,
    _activityId: Bytes,
    _attributes: string
  ): BigInt {
    let result = super.call(
      "registerDID",
      "registerDID(bytes32,bytes32,address[],string,bytes32,string):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_didSeed),
        ethereum.Value.fromFixedBytes(_checksum),
        ethereum.Value.fromAddressArray(_providers),
        ethereum.Value.fromString(_url),
        ethereum.Value.fromFixedBytes(_activityId),
        ethereum.Value.fromString(_attributes)
      ]
    );

    return result[0].toBigInt();
  }

  try_registerDID(
    _didSeed: Bytes,
    _checksum: Bytes,
    _providers: Array<Address>,
    _url: string,
    _activityId: Bytes,
    _attributes: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "registerDID",
      "registerDID(bytes32,bytes32,address[],string,bytes32,string):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_didSeed),
        ethereum.Value.fromFixedBytes(_checksum),
        ethereum.Value.fromAddressArray(_providers),
        ethereum.Value.fromString(_url),
        ethereum.Value.fromFixedBytes(_activityId),
        ethereum.Value.fromString(_attributes)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  uri(param0: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_uri(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  used(
    _provId: Bytes,
    _did: Bytes,
    _agentId: Address,
    _activityId: Bytes,
    _signatureUsing: Bytes,
    _attributes: string
  ): boolean {
    let result = super.call(
      "used",
      "used(bytes32,bytes32,address,bytes32,bytes,string):(bool)",
      [
        ethereum.Value.fromFixedBytes(_provId),
        ethereum.Value.fromFixedBytes(_did),
        ethereum.Value.fromAddress(_agentId),
        ethereum.Value.fromFixedBytes(_activityId),
        ethereum.Value.fromBytes(_signatureUsing),
        ethereum.Value.fromString(_attributes)
      ]
    );

    return result[0].toBoolean();
  }

  try_used(
    _provId: Bytes,
    _did: Bytes,
    _agentId: Address,
    _activityId: Bytes,
    _signatureUsing: Bytes,
    _attributes: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "used",
      "used(bytes32,bytes32,address,bytes32,bytes,string):(bool)",
      [
        ethereum.Value.fromFixedBytes(_provId),
        ethereum.Value.fromFixedBytes(_did),
        ethereum.Value.fromAddress(_agentId),
        ethereum.Value.fromFixedBytes(_activityId),
        ethereum.Value.fromBytes(_signatureUsing),
        ethereum.Value.fromString(_attributes)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  wasAssociatedWith(
    _provId: Bytes,
    _did: Bytes,
    _agentId: Address,
    _activityId: Bytes,
    _attributes: string
  ): boolean {
    let result = super.call(
      "wasAssociatedWith",
      "wasAssociatedWith(bytes32,bytes32,address,bytes32,string):(bool)",
      [
        ethereum.Value.fromFixedBytes(_provId),
        ethereum.Value.fromFixedBytes(_did),
        ethereum.Value.fromAddress(_agentId),
        ethereum.Value.fromFixedBytes(_activityId),
        ethereum.Value.fromString(_attributes)
      ]
    );

    return result[0].toBoolean();
  }

  try_wasAssociatedWith(
    _provId: Bytes,
    _did: Bytes,
    _agentId: Address,
    _activityId: Bytes,
    _attributes: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "wasAssociatedWith",
      "wasAssociatedWith(bytes32,bytes32,address,bytes32,string):(bool)",
      [
        ethereum.Value.fromFixedBytes(_provId),
        ethereum.Value.fromFixedBytes(_did),
        ethereum.Value.fromAddress(_agentId),
        ethereum.Value.fromFixedBytes(_activityId),
        ethereum.Value.fromString(_attributes)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  wasDerivedFrom(
    _provId: Bytes,
    _newEntityDid: Bytes,
    _usedEntityDid: Bytes,
    _agentId: Address,
    _activityId: Bytes,
    _attributes: string
  ): boolean {
    let result = super.call(
      "wasDerivedFrom",
      "wasDerivedFrom(bytes32,bytes32,bytes32,address,bytes32,string):(bool)",
      [
        ethereum.Value.fromFixedBytes(_provId),
        ethereum.Value.fromFixedBytes(_newEntityDid),
        ethereum.Value.fromFixedBytes(_usedEntityDid),
        ethereum.Value.fromAddress(_agentId),
        ethereum.Value.fromFixedBytes(_activityId),
        ethereum.Value.fromString(_attributes)
      ]
    );

    return result[0].toBoolean();
  }

  try_wasDerivedFrom(
    _provId: Bytes,
    _newEntityDid: Bytes,
    _usedEntityDid: Bytes,
    _agentId: Address,
    _activityId: Bytes,
    _attributes: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "wasDerivedFrom",
      "wasDerivedFrom(bytes32,bytes32,bytes32,address,bytes32,string):(bool)",
      [
        ethereum.Value.fromFixedBytes(_provId),
        ethereum.Value.fromFixedBytes(_newEntityDid),
        ethereum.Value.fromFixedBytes(_usedEntityDid),
        ethereum.Value.fromAddress(_agentId),
        ethereum.Value.fromFixedBytes(_activityId),
        ethereum.Value.fromString(_attributes)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  registerMintableDID(
    _didSeed: Bytes,
    _checksum: Bytes,
    _providers: Array<Address>,
    _url: string,
    _cap: BigInt,
    _royalties: i32,
    _activityId: Bytes,
    _attributes: string
  ): BigInt {
    let result = super.call(
      "registerMintableDID",
      "registerMintableDID(bytes32,bytes32,address[],string,uint256,uint8,bytes32,string):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_didSeed),
        ethereum.Value.fromFixedBytes(_checksum),
        ethereum.Value.fromAddressArray(_providers),
        ethereum.Value.fromString(_url),
        ethereum.Value.fromUnsignedBigInt(_cap),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_royalties)),
        ethereum.Value.fromFixedBytes(_activityId),
        ethereum.Value.fromString(_attributes)
      ]
    );

    return result[0].toBigInt();
  }

  try_registerMintableDID(
    _didSeed: Bytes,
    _checksum: Bytes,
    _providers: Array<Address>,
    _url: string,
    _cap: BigInt,
    _royalties: i32,
    _activityId: Bytes,
    _attributes: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "registerMintableDID",
      "registerMintableDID(bytes32,bytes32,address[],string,uint256,uint8,bytes32,string):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_didSeed),
        ethereum.Value.fromFixedBytes(_checksum),
        ethereum.Value.fromAddressArray(_providers),
        ethereum.Value.fromString(_url),
        ethereum.Value.fromUnsignedBigInt(_cap),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_royalties)),
        ethereum.Value.fromFixedBytes(_activityId),
        ethereum.Value.fromString(_attributes)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  enableAndMintDidNft(
    _did: Bytes,
    _cap: BigInt,
    _royalties: i32,
    _preMint: boolean
  ): boolean {
    let result = super.call(
      "enableAndMintDidNft",
      "enableAndMintDidNft(bytes32,uint256,uint8,bool):(bool)",
      [
        ethereum.Value.fromFixedBytes(_did),
        ethereum.Value.fromUnsignedBigInt(_cap),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_royalties)),
        ethereum.Value.fromBoolean(_preMint)
      ]
    );

    return result[0].toBoolean();
  }

  try_enableAndMintDidNft(
    _did: Bytes,
    _cap: BigInt,
    _royalties: i32,
    _preMint: boolean
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "enableAndMintDidNft",
      "enableAndMintDidNft(bytes32,uint256,uint8,bool):(bool)",
      [
        ethereum.Value.fromFixedBytes(_did),
        ethereum.Value.fromUnsignedBigInt(_cap),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_royalties)),
        ethereum.Value.fromBoolean(_preMint)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ActedOnBehalfCall extends ethereum.Call {
  get inputs(): ActedOnBehalfCall__Inputs {
    return new ActedOnBehalfCall__Inputs(this);
  }

  get outputs(): ActedOnBehalfCall__Outputs {
    return new ActedOnBehalfCall__Outputs(this);
  }
}

export class ActedOnBehalfCall__Inputs {
  _call: ActedOnBehalfCall;

  constructor(call: ActedOnBehalfCall) {
    this._call = call;
  }

  get _provId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _did(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _delegateAgentId(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _responsibleAgentId(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _activityId(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _signatureDelegate(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get _attributes(): string {
    return this._call.inputValues[6].value.toString();
  }
}

export class ActedOnBehalfCall__Outputs {
  _call: ActedOnBehalfCall;

  constructor(call: ActedOnBehalfCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class AddDIDProvenanceDelegateCall extends ethereum.Call {
  get inputs(): AddDIDProvenanceDelegateCall__Inputs {
    return new AddDIDProvenanceDelegateCall__Inputs(this);
  }

  get outputs(): AddDIDProvenanceDelegateCall__Outputs {
    return new AddDIDProvenanceDelegateCall__Outputs(this);
  }
}

export class AddDIDProvenanceDelegateCall__Inputs {
  _call: AddDIDProvenanceDelegateCall;

  constructor(call: AddDIDProvenanceDelegateCall) {
    this._call = call;
  }

  get _did(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _delegate(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddDIDProvenanceDelegateCall__Outputs {
  _call: AddDIDProvenanceDelegateCall;

  constructor(call: AddDIDProvenanceDelegateCall) {
    this._call = call;
  }
}

export class AddDIDProviderCall extends ethereum.Call {
  get inputs(): AddDIDProviderCall__Inputs {
    return new AddDIDProviderCall__Inputs(this);
  }

  get outputs(): AddDIDProviderCall__Outputs {
    return new AddDIDProviderCall__Outputs(this);
  }
}

export class AddDIDProviderCall__Inputs {
  _call: AddDIDProviderCall;

  constructor(call: AddDIDProviderCall) {
    this._call = call;
  }

  get _did(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _provider(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddDIDProviderCall__Outputs {
  _call: AddDIDProviderCall;

  constructor(call: AddDIDProviderCall) {
    this._call = call;
  }
}

export class BurnBatchCall extends ethereum.Call {
  get inputs(): BurnBatchCall__Inputs {
    return new BurnBatchCall__Inputs(this);
  }

  get outputs(): BurnBatchCall__Outputs {
    return new BurnBatchCall__Outputs(this);
  }
}

export class BurnBatchCall__Inputs {
  _call: BurnBatchCall;

  constructor(call: BurnBatchCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class BurnBatchCall__Outputs {
  _call: BurnBatchCall;

  constructor(call: BurnBatchCall) {
    this._call = call;
  }
}

export class GrantPermissionCall extends ethereum.Call {
  get inputs(): GrantPermissionCall__Inputs {
    return new GrantPermissionCall__Inputs(this);
  }

  get outputs(): GrantPermissionCall__Outputs {
    return new GrantPermissionCall__Outputs(this);
  }
}

export class GrantPermissionCall__Inputs {
  _call: GrantPermissionCall;

  constructor(call: GrantPermissionCall) {
    this._call = call;
  }

  get _did(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _grantee(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantPermissionCall__Outputs {
  _call: GrantPermissionCall;

  constructor(call: GrantPermissionCall) {
    this._call = call;
  }
}

export class RegisterAttributeCall extends ethereum.Call {
  get inputs(): RegisterAttributeCall__Inputs {
    return new RegisterAttributeCall__Inputs(this);
  }

  get outputs(): RegisterAttributeCall__Outputs {
    return new RegisterAttributeCall__Outputs(this);
  }
}

export class RegisterAttributeCall__Inputs {
  _call: RegisterAttributeCall;

  constructor(call: RegisterAttributeCall) {
    this._call = call;
  }

  get _didSeed(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _checksum(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _providers(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get _url(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class RegisterAttributeCall__Outputs {
  _call: RegisterAttributeCall;

  constructor(call: RegisterAttributeCall) {
    this._call = call;
  }

  get size(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RegisterDIDCall extends ethereum.Call {
  get inputs(): RegisterDIDCall__Inputs {
    return new RegisterDIDCall__Inputs(this);
  }

  get outputs(): RegisterDIDCall__Outputs {
    return new RegisterDIDCall__Outputs(this);
  }
}

export class RegisterDIDCall__Inputs {
  _call: RegisterDIDCall;

  constructor(call: RegisterDIDCall) {
    this._call = call;
  }

  get _didSeed(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _checksum(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _providers(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get _url(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _activityId(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _attributes(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class RegisterDIDCall__Outputs {
  _call: RegisterDIDCall;

  constructor(call: RegisterDIDCall) {
    this._call = call;
  }

  get size(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RemoveDIDProvenanceDelegateCall extends ethereum.Call {
  get inputs(): RemoveDIDProvenanceDelegateCall__Inputs {
    return new RemoveDIDProvenanceDelegateCall__Inputs(this);
  }

  get outputs(): RemoveDIDProvenanceDelegateCall__Outputs {
    return new RemoveDIDProvenanceDelegateCall__Outputs(this);
  }
}

export class RemoveDIDProvenanceDelegateCall__Inputs {
  _call: RemoveDIDProvenanceDelegateCall;

  constructor(call: RemoveDIDProvenanceDelegateCall) {
    this._call = call;
  }

  get _did(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _delegate(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RemoveDIDProvenanceDelegateCall__Outputs {
  _call: RemoveDIDProvenanceDelegateCall;

  constructor(call: RemoveDIDProvenanceDelegateCall) {
    this._call = call;
  }
}

export class RemoveDIDProviderCall extends ethereum.Call {
  get inputs(): RemoveDIDProviderCall__Inputs {
    return new RemoveDIDProviderCall__Inputs(this);
  }

  get outputs(): RemoveDIDProviderCall__Outputs {
    return new RemoveDIDProviderCall__Outputs(this);
  }
}

export class RemoveDIDProviderCall__Inputs {
  _call: RemoveDIDProviderCall;

  constructor(call: RemoveDIDProviderCall) {
    this._call = call;
  }

  get _did(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _provider(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RemoveDIDProviderCall__Outputs {
  _call: RemoveDIDProviderCall;

  constructor(call: RemoveDIDProviderCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RevokePermissionCall extends ethereum.Call {
  get inputs(): RevokePermissionCall__Inputs {
    return new RevokePermissionCall__Inputs(this);
  }

  get outputs(): RevokePermissionCall__Outputs {
    return new RevokePermissionCall__Outputs(this);
  }
}

export class RevokePermissionCall__Inputs {
  _call: RevokePermissionCall;

  constructor(call: RevokePermissionCall) {
    this._call = call;
  }

  get _did(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _grantee(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokePermissionCall__Outputs {
  _call: RevokePermissionCall;

  constructor(call: RevokePermissionCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetManagerCall extends ethereum.Call {
  get inputs(): SetManagerCall__Inputs {
    return new SetManagerCall__Inputs(this);
  }

  get outputs(): SetManagerCall__Outputs {
    return new SetManagerCall__Outputs(this);
  }
}

export class SetManagerCall__Inputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }

  get _addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetManagerCall__Outputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }
}

export class SetProxyApprovalCall extends ethereum.Call {
  get inputs(): SetProxyApprovalCall__Inputs {
    return new SetProxyApprovalCall__Inputs(this);
  }

  get outputs(): SetProxyApprovalCall__Outputs {
    return new SetProxyApprovalCall__Outputs(this);
  }
}

export class SetProxyApprovalCall__Inputs {
  _call: SetProxyApprovalCall;

  constructor(call: SetProxyApprovalCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetProxyApprovalCall__Outputs {
  _call: SetProxyApprovalCall;

  constructor(call: SetProxyApprovalCall) {
    this._call = call;
  }
}

export class TransferDIDOwnershipCall extends ethereum.Call {
  get inputs(): TransferDIDOwnershipCall__Inputs {
    return new TransferDIDOwnershipCall__Inputs(this);
  }

  get outputs(): TransferDIDOwnershipCall__Outputs {
    return new TransferDIDOwnershipCall__Outputs(this);
  }
}

export class TransferDIDOwnershipCall__Inputs {
  _call: TransferDIDOwnershipCall;

  constructor(call: TransferDIDOwnershipCall) {
    this._call = call;
  }

  get _did(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _newOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class TransferDIDOwnershipCall__Outputs {
  _call: TransferDIDOwnershipCall;

  constructor(call: TransferDIDOwnershipCall) {
    this._call = call;
  }
}

export class TransferDIDOwnershipManagedCall extends ethereum.Call {
  get inputs(): TransferDIDOwnershipManagedCall__Inputs {
    return new TransferDIDOwnershipManagedCall__Inputs(this);
  }

  get outputs(): TransferDIDOwnershipManagedCall__Outputs {
    return new TransferDIDOwnershipManagedCall__Outputs(this);
  }
}

export class TransferDIDOwnershipManagedCall__Inputs {
  _call: TransferDIDOwnershipManagedCall;

  constructor(call: TransferDIDOwnershipManagedCall) {
    this._call = call;
  }

  get _sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _did(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _newOwner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class TransferDIDOwnershipManagedCall__Outputs {
  _call: TransferDIDOwnershipManagedCall;

  constructor(call: TransferDIDOwnershipManagedCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UsedCall extends ethereum.Call {
  get inputs(): UsedCall__Inputs {
    return new UsedCall__Inputs(this);
  }

  get outputs(): UsedCall__Outputs {
    return new UsedCall__Outputs(this);
  }
}

export class UsedCall__Inputs {
  _call: UsedCall;

  constructor(call: UsedCall) {
    this._call = call;
  }

  get _provId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _did(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _agentId(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _activityId(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _signatureUsing(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _attributes(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class UsedCall__Outputs {
  _call: UsedCall;

  constructor(call: UsedCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WasAssociatedWithCall extends ethereum.Call {
  get inputs(): WasAssociatedWithCall__Inputs {
    return new WasAssociatedWithCall__Inputs(this);
  }

  get outputs(): WasAssociatedWithCall__Outputs {
    return new WasAssociatedWithCall__Outputs(this);
  }
}

export class WasAssociatedWithCall__Inputs {
  _call: WasAssociatedWithCall;

  constructor(call: WasAssociatedWithCall) {
    this._call = call;
  }

  get _provId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _did(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _agentId(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _activityId(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _attributes(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class WasAssociatedWithCall__Outputs {
  _call: WasAssociatedWithCall;

  constructor(call: WasAssociatedWithCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WasDerivedFromCall extends ethereum.Call {
  get inputs(): WasDerivedFromCall__Inputs {
    return new WasDerivedFromCall__Inputs(this);
  }

  get outputs(): WasDerivedFromCall__Outputs {
    return new WasDerivedFromCall__Outputs(this);
  }
}

export class WasDerivedFromCall__Inputs {
  _call: WasDerivedFromCall;

  constructor(call: WasDerivedFromCall) {
    this._call = call;
  }

  get _provId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _newEntityDid(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _usedEntityDid(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _agentId(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _activityId(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _attributes(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class WasDerivedFromCall__Outputs {
  _call: WasDerivedFromCall;

  constructor(call: WasDerivedFromCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RegisterMintableDIDCall extends ethereum.Call {
  get inputs(): RegisterMintableDIDCall__Inputs {
    return new RegisterMintableDIDCall__Inputs(this);
  }

  get outputs(): RegisterMintableDIDCall__Outputs {
    return new RegisterMintableDIDCall__Outputs(this);
  }
}

export class RegisterMintableDIDCall__Inputs {
  _call: RegisterMintableDIDCall;

  constructor(call: RegisterMintableDIDCall) {
    this._call = call;
  }

  get _didSeed(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _checksum(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _providers(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get _url(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _cap(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _royalties(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get _activityId(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get _attributes(): string {
    return this._call.inputValues[7].value.toString();
  }
}

export class RegisterMintableDIDCall__Outputs {
  _call: RegisterMintableDIDCall;

  constructor(call: RegisterMintableDIDCall) {
    this._call = call;
  }

  get size(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class EnableAndMintDidNftCall extends ethereum.Call {
  get inputs(): EnableAndMintDidNftCall__Inputs {
    return new EnableAndMintDidNftCall__Inputs(this);
  }

  get outputs(): EnableAndMintDidNftCall__Outputs {
    return new EnableAndMintDidNftCall__Outputs(this);
  }
}

export class EnableAndMintDidNftCall__Inputs {
  _call: EnableAndMintDidNftCall;

  constructor(call: EnableAndMintDidNftCall) {
    this._call = call;
  }

  get _did(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _cap(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _royalties(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _preMint(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class EnableAndMintDidNftCall__Outputs {
  _call: EnableAndMintDidNftCall;

  constructor(call: EnableAndMintDidNftCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get _did(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _did(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class Burn1Call extends ethereum.Call {
  get inputs(): Burn1Call__Inputs {
    return new Burn1Call__Inputs(this);
  }

  get outputs(): Burn1Call__Outputs {
    return new Burn1Call__Outputs(this);
  }
}

export class Burn1Call__Inputs {
  _call: Burn1Call;

  constructor(call: Burn1Call) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class Burn1Call__Outputs {
  _call: Burn1Call;

  constructor(call: Burn1Call) {
    this._call = call;
  }
}
